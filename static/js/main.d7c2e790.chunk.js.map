{"version":3,"sources":["Components/MovieInstance/MovieInstance.jsx","Components/NavigationBar/NavigationBar.jsx","Pages/Landing_Page/LandingPage.jsx","Pages/Movie_Page/heart.svg","Pages/Movie_Page/MoviePage.jsx","Pages/Visited_Page/VisitedPage.jsx","Pages/Favourites_Page/FavouritesPage.jsx","App.js","index.js"],"names":["MovieInstance","props","imageLink","movie","poster_path","style","textDecoration","onClick","origin","window","location","reload","to","state","movieId","id","className","src","alt","vote_average","background","title","release_date","substring","undefined","genres","map","genre","index","NavigationBar","useState","search","setsearch","inputRef","useRef","searchResultsDiv","movies","setmovies","moviesGlobal","useLocation","origin1","console","log","pathname","useEffect","getData","then","response","json","dataRaw","Array","from","results","data","catch","err","responseArray","push","newArray","duplicateIdKey","ref","value","onKeyDown","e","key","current","display","onChange","type","LandingPage","popular","top_rated","upcoming","movieNumbers","moviesLoaded","currentMovie","pageNumberPopular","pageNumberTopRated","pageNumberUpcoming","movieGenres","handleMovies","bind","handleMovieArray","handleMovieMaping","handleSelectorButtons","popularButton","React","createRef","topRatedButton","visitedButton","this","add","branche","movieBranche","numberOfMoviesToLoad","caller","runCode","numberOfMovies","pageNumber","length","newId","randomID","dummyObjectForMovies","element","thisMovieGenres","genre_ids","forEach","name","setState","callingRef","Component","MoviePage","stars","setstars","setmovie","recomended","setrecomended","similar","setsimilar","credits","setcredits","favouriteButton","movieIsFavourite","setmovieIsFavourite","handleSavingMovie","number","parsedData","storageData","parsedDataArray","localStorage","getItem","JSON","parse","includes","setItem","stringify","mainDataInstance","rating","ratingInStars","maxRating","starsActive","Math","round","temporaryArray","i","handleMovieRating","temporaryCredits","cast","checkIfMovieIsInFavourites","backdrop_path","runtime","star","color","target","href","imdb_id","removeFromFavourites","heart","overview","getGenres","responseData","VisitedPage","moviesdisplay","setmoviesdisplay","error","moviesDataTemporary","moviesData","movieGenresFullArray","p","Promise","resolve","reject","mapMovie","clearMoviesFromStorage","FavouritesPage","APIKEY","baseURL","App","handleGettingGenres","urlData","aditionalData","urlFactory","fetch","status","Error","toString","filteredData","filter","movieInStorage","removeItem","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7c2e790.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport \"./Style/movieInstance.css\"\r\n\r\n\r\n\r\n\r\nfunction MovieInstance(props) {\r\n\r\n    const imageLink = `https://image.tmdb.org/t/p/w154/${props.movie.poster_path}`\r\n\r\n\r\n    return (\r\n        <Link\r\n            style={{ textDecoration: 'none' }}\r\n            onClick={() => {\r\n                if (props.origin != false)\r\n                    window.location.reload()\r\n            }\r\n            } to=\"/movie\"\r\n            state={{ movieId: props.movie.id }}\r\n        >\r\n            <div className=\"movie__instance__container\">\r\n                <div className=\"movie__image__container\">\r\n                    <img src={imageLink} alt=\"\" className=\"movie__img\" />\r\n                    <div\r\n                        style={props.movie.vote_average >= 6 ?\r\n                            { background: \"chartreuse\" } :\r\n                            { background: \"red\" }} className=\"movie__rating__container\">\r\n                        {props.movie.vote_average}\r\n                    </div>\r\n                </div>\r\n                <div className=\"movie__text__container\">\r\n                    <p style={{ textDecoration: 'none' }} className=\"title\">{props.movie.title}</p>\r\n                    <p className=\"year\">{props.movie.release_date.substring(0, 4)}</p>\r\n                    {props.genres !== undefined ? props.genres.map((genre, index) => {\r\n                        return (\r\n                            <span key={index}>{genre} </span>\r\n                        )\r\n                    }) : null}\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default MovieInstance\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { Link, useLocation } from 'react-router-dom'\r\nimport MovieInstance from '../MovieInstance/MovieInstance'\r\nimport { FaSearch } from \"react-icons/fa\"\r\n\r\n//STYLE\r\nimport \"./style/navigationBar.css\"\r\n\r\n//search/multi\r\n//&language=en-US&query=spiderman&page=1&include_adult=false\r\n\r\nfunction NavigationBar(props) {\r\n\r\n    const [search, setsearch] = useState(\"\")\r\n    const inputRef = useRef(null)\r\n    const searchResultsDiv = useRef(null)\r\n    const [movies, setmovies] = useState([])\r\n    let moviesGlobal = []\r\n    const location = useLocation()\r\n    let origin1 = true\r\n    console.log(location.pathname)\r\n    if (location.pathname === \"/favourites\" || location.pathname === \"/visited\" || location.pathname === \"/\") {\r\n        origin1 = false\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (search != \"\") {\r\n            props.getData(\"search/multi\", `&language=en-US&query=${search}&page=1&include_adult=false`)\r\n                .then((response) => {\r\n                    return response.json()\r\n                })\r\n                .then((dataRaw) => {\r\n                    return Array.from(dataRaw.results)\r\n                })\r\n                .then(data => {\r\n                    return data.map(movie => {\r\n                        return props.getData(`movie/${movie.id}`, \"&language=en-US\")\r\n                            .then((response) => {\r\n                                return response.json()\r\n                            })\r\n                            .then(data => {\r\n                                return data\r\n                            })\r\n                            .catch((err) => {\r\n                            })\r\n                    });\r\n                })\r\n                .then((responseArray) => {\r\n\r\n                    responseArray.map(response => {\r\n                        response.then((data) => {\r\n                            if (data !== undefined) {\r\n                                moviesGlobal.push(data)\r\n                            }\r\n                            let newArray = moviesGlobal.map((movie, index) => {\r\n                                if (index < 8) {\r\n                                    let duplicateIdKey = movie.id + 10000000\r\n                                    console.log(origin1)\r\n                                    return (\r\n                                        <MovieInstance\r\n                                            origin={origin1}\r\n                                            getData={props.getData}\r\n                                            movie={movie}\r\n                                            key={duplicateIdKey}\r\n                                        />\r\n                                    )\r\n                                }\r\n                            })\r\n                            setmovies(newArray)\r\n                        })\r\n                    }\r\n                    )\r\n                })\r\n                .catch((err) => {\r\n                })\r\n        }\r\n        else {\r\n            setmovies([])\r\n        }\r\n    }, [search])\r\n\r\n\r\n\r\n    return (\r\n        <section>\r\n            <main className=\"nav__bar__main\">\r\n                <div className=\"nav__bar__container\">\r\n                    <Link className=\"home__button\" to=\"/\">\r\n                        Home\r\n                    </Link>\r\n                    <div className=\"nav__bar__container__left\">\r\n                        <div className=\"search__bar__container\">\r\n                            <FaSearch className=\"search__bar__icon\"></FaSearch>\r\n                            <input\r\n                                ref={inputRef}\r\n                                value={search}\r\n                                onKeyDown={(e) => {\r\n                                    if (e.key === \"Enter\") {\r\n                                        searchResultsDiv.current.style.display = \"none\"\r\n                                    }\r\n                                    else {\r\n                                        searchResultsDiv.current.style.display = \"flex\"\r\n                                    }\r\n                                }}\r\n                                onClick={() => {\r\n                                    searchResultsDiv.current.style.display = \"flex\"\r\n                                }}\r\n                                onChange={() => {\r\n                                    moviesGlobal = []\r\n                                    setsearch(inputRef.current.value)\r\n                                }} type=\"text\" className=\"search__bar__input\" />\r\n                            <main onClick={() => { searchResultsDiv.current.style.display = \"none\" }} ref={searchResultsDiv} className=\"search__results__main\">\r\n                                {movies}\r\n                            </main>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"nav__bar__container__right\">\r\n                        <Link className=\"nav__bar__container__right__link\" to=\"/favourites\">\r\n                            Favourites\r\n                        </Link>\r\n                        <h3 className=\"nav__bar__container__right__decor\">|</h3>\r\n                        <Link className=\"nav__bar__container__right__link\" to=\"/visited\">\r\n                            Visited\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default NavigationBar\r\n\r\n","import React, { Component } from 'react'\r\nimport MovieInstance from '../../Components/MovieInstance/MovieInstance'\r\n\r\n\r\n\r\nimport \"./Style/landing.css\"\r\n\r\n\r\n\r\nexport class LandingPage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n\r\n\r\n        this.state = {\r\n\r\n\r\n            display: {\r\n                popular: [],\r\n                top_rated: [],\r\n                upcoming: [],\r\n            },\r\n        }\r\n        this.movies = {\r\n            popular: [],\r\n            top_rated: [],\r\n            upcoming: [],\r\n        }\r\n        //CLASS VARIABLES\r\n        this.movieNumbers = {\r\n            popular: 0,\r\n            top_rated: 0,\r\n            upcoming: 0,\r\n        }\r\n        this.moviesLoaded = {\r\n            popular: false,\r\n            top_rated: false,\r\n            upcoming: false,\r\n        }\r\n\r\n        this.currentMovie = \"popular\"\r\n\r\n        this.pageNumberPopular = 1\r\n        this.pageNumberTopRated = 1\r\n        this.pageNumberUpcoming = 1\r\n\r\n\r\n\r\n        this.movieGenres = []\r\n\r\n        this.handleMovies = this.handleMovies.bind(this)\r\n        this.handleMovieArray = this.handleMovieArray.bind(this)\r\n        this.handleMovieMaping = this.handleMovieMaping.bind(this)\r\n        this.handleSelectorButtons = this.handleSelectorButtons.bind(this)\r\n\r\n        //buttonRefs\r\n        this.popularButton = React.createRef();\r\n        this.topRatedButton = React.createRef();\r\n        this.visitedButton = React.createRef();\r\n\r\n\r\n\r\n    }\r\n    componentDidMount() {\r\n        //Calling handle movies method to load first 12 movies and passing default parameters.\r\n        this.handleMovies(\"popular\", 12)\r\n        //when refreshing setting underline to popular buton\r\n        this.handleSelectorButtons(this.popularButton)\r\n    }\r\n\r\n    handleMovieArray(add, branche) {\r\n        //Seting movie array to previous + new movie array when loading new movies..\r\n        this.movies[branche].push(...add)\r\n    }\r\n\r\n    handleMovies(movieBranche, numberOfMoviesToLoad, caller = \"bottomButton\") {\r\n        //Checking if code should update according to name of calling function\r\n        let runCode = true\r\n        this.currentMovie = movieBranche\r\n        if (this.currentMovie === movieBranche && caller === \"topButton\" && this.moviesLoaded[movieBranche] === true) {\r\n            runCode = false\r\n            this.handleMovieMaping()\r\n        }\r\n        else if (this.moviesLoaded[movieBranche] === false) {\r\n            this.moviesLoaded[movieBranche] = true\r\n        }\r\n\r\n        if (runCode) {\r\n            //Setting current movie state so button(load more movies) knows which movies to load when clicked.\r\n\r\n            //Updating arrayOfMovies\r\n            let numberOfMovies = 0;\r\n            if (this.movieNumbers[movieBranche] !== 0) {\r\n                numberOfMovies = this.movieNumbers[movieBranche]\r\n            }\r\n            else {\r\n                numberOfMovies = 12\r\n            }\r\n            this.movieNumbers[movieBranche] += numberOfMoviesToLoad\r\n            let pageNumber = 0\r\n            //Checking which movie branche page is calling method...\r\n            if (movieBranche === \"popular\") {\r\n                //Seting local variables to global variables \r\n                //because method accepts generic movieBranche... This could be shrinked with for loop. \r\n                pageNumber = this.pageNumberPopular\r\n            }\r\n            else if (movieBranche === \"top_rated\") {\r\n                pageNumber = this.pageNumberTopRated\r\n            }\r\n            else if (movieBranche === \"upcoming\") {\r\n                pageNumber = this.pageNumberUpcoming\r\n            }\r\n            if (this.movies[movieBranche].length - numberOfMovies < 12) {\r\n                this.props.getData(`movie/${movieBranche}/`, `&page=${pageNumber}`)\r\n                    .then((response) => {\r\n                        return response.json()\r\n                    })\r\n                    .then((data) => {\r\n                        //Updating internal state\r\n                        this.handleMovieArray(data.results, movieBranche)\r\n                        //Udating display state\r\n                        this.handleMovieMaping(movieBranche)\r\n\r\n                        if (movieBranche === \"popular\") {\r\n                            this.pageNumberPopular++;\r\n                        }\r\n                        else if (movieBranche === \"top_rated\") {\r\n                            this.pageNumberTopRated++;\r\n                        }\r\n                        else if (movieBranche === \"upcoming\") {\r\n                            this.pageNumberUpcoming++;\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err)\r\n                    })\r\n            }\r\n            else {\r\n                this.handleMovieMaping(movieBranche)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    handleMovieMaping() {\r\n        //error on MovieDB site because of dusplicate Pulp Fiction\r\n        let newId = 0\r\n        let randomID = 218735178235172\r\n\r\n\r\n        const dummyObjectForMovies = this.state.display\r\n        //fetched data of genres \r\n        this.props.getData(\"genre/movie/list\")\r\n            .then((response) => {\r\n                return response.json()\r\n            })\r\n            .then((data) => {\r\n                dummyObjectForMovies[this.currentMovie] =\r\n                    this.movies[this.currentMovie].map((element, index) => {\r\n                        //THIS IS ADDED BECAUSE OF DUPLICATE ID ON MOVIE DB\r\n                        //--------------------------------------------------------\r\n                        newId = element.id\r\n                        if (element.id === 680) {\r\n                            newId = randomID\r\n                            randomID++;\r\n                        }\r\n                        //--------------------------------------------------------\r\n                        if (index < this.movieNumbers[this.currentMovie]) {\r\n                            let thisMovieGenres = []\r\n                            // console.log(element)\r\n                            element.genre_ids.forEach(id => {\r\n                                data.genres.forEach(genre => {\r\n                                    if (genre.id === id) {\r\n                                        //adding data to genres array\r\n                                        thisMovieGenres.push(genre.name)\r\n                                    }\r\n                                });\r\n                            });\r\n                            return (\r\n                                <MovieInstance\r\n                                    getData={this.props.getData}\r\n                                    movie={element}\r\n                                    genres={thisMovieGenres}\r\n                                    key={newId}\r\n                                    origin={false}\r\n                                />\r\n                            )\r\n                        }\r\n                    })\r\n\r\n                this.setState({\r\n                    display: dummyObjectForMovies\r\n                })\r\n            })\r\n        //Needed for changing nested states\r\n    }\r\n\r\n    handleSelectorButtons(callingRef) {\r\n        this.popularButton.current.style.textDecoration = \"none\"\r\n        this.topRatedButton.current.style.textDecoration = \"none\"\r\n        this.visitedButton.current.style.textDecoration = \"none\"\r\n        callingRef.current.style.textDecoration = \"underline\"\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <main className=\"landing__page\">\r\n                <div className=\"landing__page__container\">\r\n                    <div className=\"landing__page__top__container\">\r\n                        <ul className=\"landing__page__navbar\">\r\n                            <li\r\n                                ref={this.popularButton}\r\n                                onClick={\r\n                                    () => {\r\n                                        this.handleMovies(\"popular\", 12, \"topButton\")\r\n                                        this.handleSelectorButtons(this.popularButton)\r\n                                    }\r\n\r\n                                } className=\"landing__page__navbar__button\">Popular</li>\r\n                            <li\r\n                                ref={this.topRatedButton}\r\n                                onClick={\r\n                                    () => {\r\n                                        this.handleMovies(\"top_rated\", 12, \"topButton\")\r\n                                        this.handleSelectorButtons(this.topRatedButton)\r\n                                    }\r\n\r\n                                } className=\"landing__page__navbar__button\">Top Rated</li>\r\n                            <li\r\n                                ref={this.visitedButton}\r\n                                onClick={\r\n                                    () => {\r\n                                        this.handleMovies(\"upcoming\", 12, \"topButton\")\r\n                                        this.handleSelectorButtons(this.visitedButton)\r\n                                    }\r\n\r\n                                } className=\"landing__page__navbar__button\">Upcoming</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"landing__page__movies\">\r\n                        <div className=\"landing__page__movies__container\">\r\n                            {/* MOVIE COMPONENTS */}\r\n                            {\r\n                                this.state.display[this.currentMovie]\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"landing__page__button__container\">\r\n                        <button onClick={() => { this.handleMovies(this.currentMovie, 12) }} className=\"landing__page__button\">LOAD MORE</button>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LandingPage","export default __webpack_public_path__ + \"static/media/heart.92706a5b.svg\";","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport MovieInstance from '../../Components/MovieInstance/MovieInstance.jsx'\r\n\r\nimport \"./Style/movie.css\"\r\nimport { AiOutlineHeart, AiFillHeart } from \"react-icons/ai\"\r\nimport { BsStarFill, BsStar } from \"react-icons/bs\"\r\n\r\nimport heart from \"./heart.svg\"\r\n\r\nfunction MoviePage(props) {\r\n    //refresh\r\n\r\n    const location = useLocation()\r\n    const { movieId } = location.state\r\n\r\n    const [stars, setstars] = useState([])\r\n\r\n    const [movie, setmovie] = useState({})\r\n\r\n    const [recomended, setrecomended] = useState([])\r\n    const [similar, setsimilar] = useState([])\r\n\r\n\r\n    const [credits, setcredits] = useState([])\r\n\r\n    const favouriteButton = useRef(null)\r\n\r\n    const [movieIsFavourite, setmovieIsFavourite] = useState(false)\r\n\r\n    const IMDB_API_KEY = \"k_vak98huk\"\r\n    //https://imdb-api.com/en/API/Ratings/k_vak98huk/{imdbId}\r\n\r\n    //links\r\n    //backdrop_path\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        //checking if component should update manually\r\n        let mainDataInstance = null\r\n        props.getData(`movie/${movieId}`)\r\n            .then((response) => {\r\n                return response.json()\r\n            })\r\n            .then((data) => {\r\n                mainDataInstance = data\r\n                setmovie(data)\r\n                handleMovieRating(mainDataInstance.vote_average)\r\n                return props.getData(`movie/${data.id}/recommendations`)\r\n            })\r\n            .then((response) => {\r\n                return response.json()\r\n            })\r\n            .then((data) => {\r\n                setrecomended(data.results)\r\n                return props.getData(`movie/${mainDataInstance.id}/similar`)\r\n            })\r\n            .then((response) => {\r\n                return response.json()\r\n            })\r\n            .then((data) => {\r\n                setsimilar(data.results)\r\n                return props.getData(`movie/${mainDataInstance.id}`, \"&append_to_response=credits\")\r\n            })\r\n            .then((response) => {\r\n                return response.json()\r\n            })\r\n            .then((data) => {\r\n                let temporaryCredits = []\r\n                for (let i = 0; i < 4; i++) {\r\n                    temporaryCredits.push(`${data.credits.cast[i].name}, `)\r\n                }\r\n                setcredits(temporaryCredits)\r\n                handleSavingMovie(mainDataInstance.id, \"visited\")\r\n                checkIfMovieIsInFavourites()\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }, [])\r\n\r\n\r\n    function handleMovieRating(rating) {\r\n        let numberOfStars = 5\r\n        let maxRating = 10\r\n        let ratingInStars = maxRating / numberOfStars\r\n        let starsActive = Math.round(rating / ratingInStars)\r\n\r\n        let temporaryArray = []\r\n\r\n        for (let i = 0; i < starsActive; i++) {\r\n            temporaryArray.push(i)\r\n        }\r\n        setstars(temporaryArray)\r\n    }\r\n\r\n\r\n    //Adding to local storage (Visited or favourites)\r\n    function handleSavingMovie(number, type) {\r\n        let parsedData = null\r\n        let storageData = null\r\n        let parsedDataArray = []\r\n        if (window.localStorage.getItem(type) !== null) {\r\n            parsedData = JSON.parse(window.localStorage.getItem(type))\r\n            parsedDataArray = Array.from(parsedData)\r\n            storageData = [...parsedDataArray, number]\r\n        }\r\n        else {\r\n            storageData = [number]\r\n        }\r\n        //Checking if movie is already added to storage\r\n        if (!parsedDataArray.includes(number)) {\r\n            window.localStorage.setItem(type, JSON.stringify(storageData))\r\n        }\r\n    }\r\n\r\n    function checkIfMovieIsInFavourites() {\r\n        if ((window.localStorage.getItem(\"favourites\") !== null)) {\r\n            let parsedData = JSON.parse(window.localStorage.getItem(\"favourites\"))\r\n            let parsedDataArray = Array.from(parsedData)\r\n            if (parsedDataArray.includes(movieId)) {\r\n                setmovieIsFavourite(true)\r\n                favouriteButton.current.style.background = \"red\"\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"main__movie__container\">\r\n            <div className=\"top__part\">\r\n                <div className=\"backposter__container\">\r\n                    <img src={`https://image.tmdb.org/t/p/original/${movie.backdrop_path}`} alt=\"\" />\r\n                </div>\r\n                <div className=\"info__container\">\r\n                    <div className=\"image__container\">\r\n                        <div className=\"under__poster__container\">\r\n                            <div className=\"poster__image\">\r\n                                <img src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`} alt=\"\" className=\"poster__img\" />\r\n                                <h3 className=\"runtime\">{movie.runtime} min</h3>\r\n                            </div>\r\n                            <div className=\"stars\">\r\n                                <div className=\"rating__container\">\r\n                                    <div className=\"inside__stars\">\r\n                                        {stars.map((star) => {\r\n                                            return (\r\n                                                <BsStarFill style={{ color: \"yellow\" }} className=\"star\">\r\n                                                </BsStarFill>\r\n                                            )\r\n                                        })}\r\n                                    </div>\r\n                                    <div className=\"imdb__rating\">\r\n                                        <a target=\"_blank\" href={`https://www.imdb.com/title/${movie.imdb_id}/`}>IMDB</a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"add__to__favorites\">\r\n                                <img ref={favouriteButton} onClick={() => {\r\n                                    if (!movieIsFavourite) {\r\n                                        favouriteButton.current.style.background = \"red\"\r\n                                        handleSavingMovie(movie.id, \"favourites\")\r\n                                        setmovieIsFavourite(true)\r\n                                    }\r\n                                    else {\r\n                                        favouriteButton.current.style.background = \"black\"\r\n                                        props.removeFromFavourites(movieId)\r\n                                        setmovieIsFavourite(false)\r\n                                    }\r\n                                }} src={heart} alt=\"\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text__info__container\">\r\n                        <div className=\"title__container\">\r\n                            <h3 className=\"title\">{movie.title}</h3>\r\n                            <p className=\"text\">{movie.overview}</p>\r\n                        </div>\r\n                        <div className=\"credits__container\">\r\n                            <h3 className=\"title\">Credits</h3>\r\n                            <p className=\"text\">{credits}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"bottom__part\">\r\n                <h1 className=\"bottom__part__text\">RECOMENDED</h1>\r\n                <div className=\"recomended__container\">\r\n                    {recomended.map((movie, index) => {\r\n                        if (index < 6) {\r\n                            let movieGenres = []\r\n                            props.getGenres(movie)\r\n                                .then((responseData) => {\r\n                                    movieGenres = responseData\r\n                                })\r\n                            return (\r\n                                <div className=\"recomended\">\r\n                                    <MovieInstance\r\n                                        origin={true}\r\n                                        getData={props.getData}\r\n                                        movie={movie}\r\n                                        key={movie.id}\r\n                                        genres={movieGenres}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        }\r\n                    })}\r\n                </div>\r\n                <h1 className=\"bottom__part__text\">SIMILAR</h1>\r\n                <div className=\"similar__container\">\r\n                    {similar.map((movie, index) => {\r\n                        if (index < 6) {\r\n                            let movieGenres = []\r\n                            props.getGenres(movie)\r\n                                .then((responseData) => {\r\n                                    movieGenres = responseData\r\n                                })\r\n                            return (\r\n                                <div className=\"similar\">\r\n                                    <MovieInstance\r\n                                        origin={true}\r\n                                        getData={props.getData}\r\n                                        movie={movie}\r\n                                        key={movie.id}\r\n                                        genres={movieGenres}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        }\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MoviePage\r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport MovieInstance from '../../Components/MovieInstance/MovieInstance'\r\n\r\nimport \"./Style/visited.css\"\r\n\r\nfunction VisitedPage(props) {\r\n    let movies = []\r\n    const [moviesdisplay, setmoviesdisplay] = useState([])\r\n    const location = useLocation()\r\n\r\n\r\n    window.localStorage.setItem(\"sessionF\", null)\r\n    if (window.localStorage.getItem(\"sessionV\") === \"null\") {\r\n        window.location.reload()\r\n        window.localStorage.setItem(\"sessionV\", 1)\r\n    }\r\n    useEffect(() => {\r\n        //refreshing\r\n        //Geting data from page\r\n        try {\r\n            movies = (Array.from(JSON.parse(window.localStorage.getItem(\"visited\"))))//here change\r\n        } catch (error) {\r\n            return\r\n        }\r\n\r\n        let moviesDataTemporary = []\r\n        movies.forEach((movieId, index) => {\r\n            props.getData(`movie/${movieId}`)\r\n                .then((response) => {\r\n                    return response.json()\r\n                })\r\n                .then((data) => {\r\n                    moviesDataTemporary.push(data)\r\n                    if ((movies.length - 1) === index) {\r\n                        mapMovie(moviesDataTemporary)\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err)\r\n                })\r\n        });\r\n    }, [location.key])\r\n\r\n    function mapMovie(moviesData) {\r\n        {\r\n            let movieGenresFullArray = []\r\n            const p = new Promise((resolve, reject) => {\r\n                moviesData.map((movie, index) => {\r\n                    props.getGenres(movie)\r\n                        .then((responseData) => {\r\n                            movieGenresFullArray.push(responseData)\r\n                            if (moviesData.length - 1 === index) {\r\n                                resolve(\"ok\")\r\n                            }\r\n                            else {\r\n                            }\r\n                        })\r\n                })\r\n            })\r\n            p.\r\n                then(() => {\r\n                    setmoviesdisplay(\r\n                        moviesData.map((movie, index) => {\r\n                            return (\r\n                                <div className=\"one__movie__container\">\r\n                                    <MovieInstance\r\n                                        origin={false}\r\n                                        getData={props.getData}\r\n                                        movie={movie}\r\n                                        genres={movieGenresFullArray[index]}\r\n                                        key={movie.id}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        })\r\n                    )\r\n                })\r\n                .catch(err => {\r\n                    console.log(err)\r\n                })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <main className=\"favourites__container\">\r\n            <div className=\"favourits__text\">\r\n                <h1 className=\"title\">Visited</h1>\r\n                <button onClick={() => {\r\n                    props.clearMoviesFromStorage(\"visited\")//here change\r\n                    window.location.reload()\r\n                }} className=\"clear__favourites\">\r\n                    Clear Visited\r\n                </button>\r\n            </div>\r\n            <div className=\"movies__container\">\r\n                {moviesdisplay}\r\n            </div>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default VisitedPage\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport MovieInstance from '../../Components/MovieInstance/MovieInstance'\r\n\r\n\r\nimport \"./Style/favourites.css\"\r\n\r\n\r\n\r\n\r\n\r\nfunction FavouritesPage(props) {\r\n\r\n    let movies = []\r\n    const [moviesdisplay, setmoviesdisplay] = useState([])\r\n    const location = useLocation()\r\n\r\n    window.localStorage.setItem(\"sessionV\", null)\r\n    if (window.localStorage.getItem(\"sessionF\") === \"null\") {\r\n        window.location.reload()\r\n        window.localStorage.setItem(\"sessionF\", 1)\r\n    }\r\n\r\n    useEffect(() => {\r\n        //refresing \r\n\r\n        //Geting data from page\r\n        try {\r\n            movies = (Array.from(JSON.parse(window.localStorage.getItem(\"favourites\"))))//here change\r\n        } catch (error) {\r\n            console.log(error)\r\n            return\r\n        }\r\n\r\n        let moviesDataTemporary = []\r\n        movies.forEach((movieId, index) => {\r\n            props.getData(`movie/${movieId}`)\r\n                .then((response) => {\r\n                    return response.json()\r\n                })\r\n                .then((data) => {\r\n                    moviesDataTemporary.push(data)\r\n                    if ((movies.length - 1) === index) {\r\n                        mapMovie(moviesDataTemporary)\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err)\r\n                })\r\n        });\r\n    }, [location.key])\r\n\r\n\r\n    function mapMovie(moviesData) {\r\n        {\r\n            let movieGenresFullArray = []\r\n            const p = new Promise((resolve, reject) => {\r\n                moviesData.map((movie, index) => {\r\n                    props.getGenres(movie)\r\n                        .then((responseData) => {\r\n                            movieGenresFullArray.push(responseData)\r\n                            if (moviesData.length - 1 === index) {\r\n                                resolve(\"ok\")\r\n                            }\r\n                            else {\r\n                            }\r\n                        })\r\n                })\r\n            })\r\n            p.\r\n                then(() => {\r\n                    setmoviesdisplay(\r\n                        moviesData.map((movie, index) => {\r\n                            return (\r\n                                <div className=\"one__movie__container\">\r\n                                    <button title=\"Remove from favourites\" onClick={() => {\r\n                                        props.removeFromFavourites(movie.id)\r\n                                        window.location.reload()\r\n                                    }\r\n                                    } className=\"remove__from__favourites__button\">X</button>\r\n                                    <MovieInstance\r\n                                        origin={false}\r\n                                        getData={props.getData}\r\n                                        movie={movie}\r\n                                        genres={movieGenresFullArray[index]}\r\n                                        key={movie.id}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        })\r\n                    )\r\n                })\r\n                .catch(err => {\r\n                    console.log(err)\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <main className=\"favourites__container\">\r\n                <div className=\"favourits__text\">\r\n                    <h1 className=\"title\">Favourites</h1>\r\n                    <button onClick={() => {\r\n                        props.clearMoviesFromStorage(\"favourites\")//here change\r\n                        window.location.reload()\r\n                    }} className=\"clear__favourites\">\r\n                        Clear Favourites\r\n                    </button>\r\n                </div>\r\n                <div className=\"movies__container\">\r\n                    {moviesdisplay}\r\n                </div>\r\n            </main>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FavouritesPage\r\n","//-------------API KEY-------------\n// e0d512f22b5823229e6f8aba260e1c20\n\n\n//LIBARIES\nimport React, { Component } from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\n\n//COMPONENTS\nimport NavigationBar from \"./Components/NavigationBar/NavigationBar.jsx\";\nimport LandingPage from \"./Pages/Landing_Page/LandingPage.jsx\";\nimport MoviePage from \"./Pages/Movie_Page/MoviePage.jsx\";\nimport VisitedPage from \"./Pages/Visited_Page/VisitedPage.jsx\";\nimport FavouritesPage from \"./Pages/Favourites_Page/FavouritesPage.jsx\";\n\n//STYLE\nimport \"./Style/app.css\"\n\n\n//API STUFF\nconst APIKEY = \"e0d512f22b5823229e6f8aba260e1c20\"\nconst baseURL = \"https://api.themoviedb.org/3/\"\n\n\n\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.getData = this.getData.bind(this)\n    this.handleGettingGenres = this.handleGettingGenres.bind(this)\n    this.removeFromFavourites = this.removeFromFavourites.bind(this)\n    this.clearMoviesFromStorage = this.clearMoviesFromStorage.bind(this)\n  }\n\n  componentDidMount() {\n  }\n\n\n  getData(urlData, aditionalData = \"\") {\n    function urlFactory() {\n      let url = \"\"\n      url = `${baseURL}${urlData}?api_key=${APIKEY}${aditionalData}`\n      return url;\n    }\n    return (fetch(urlFactory())\n      .then((response) => {\n        if (response.status === 200) {\n          return response\n        }\n        else {\n          throw new Error(\"invalid Url\")\n        }\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n    )\n  }\n  handleGettingGenres(movie, returnFullArray = false) {\n    return (this.getData(\"genre/movie/list\")\n      .then((response) => {\n        return response.json()\n      })\n      .then((data) => {\n        // console.log(element)\n        let thisMovieGenres = []\n\n        //checking if {genres__ids} are avalible or {genres} are avalible \n        if (movie.genre_ids === undefined) {\n          movie.genres.forEach((genre) => {\n            thisMovieGenres.push(genre.name.toString())\n          })\n        }\n        else {\n          movie.genre_ids.forEach(id => {\n            data.genres.forEach(genre => {\n              if (genre.id === id) {\n                //adding data to genres array\n                thisMovieGenres.push(genre.name)\n              }\n            });\n          });\n        }\n\n        return thisMovieGenres\n      }))\n  }\n  removeFromFavourites(movieId) {\n    if ((window.localStorage.getItem(\"favourites\") !== null)) {\n      let parsedData = JSON.parse(window.localStorage.getItem(\"favourites\"))\n      let parsedDataArray = Array.from(parsedData)\n      const filteredData = parsedDataArray.filter((movieInStorage) => {\n        if (movieId != movieInStorage) {\n          return movieInStorage\n        }\n      })\n      window.localStorage.setItem(\"favourites\", JSON.stringify(filteredData))\n    }\n  }\n  clearMoviesFromStorage(type) {\n    window.localStorage.removeItem(type)\n  }\n  render() {\n    return (\n      <Router>\n        <NavigationBar\n          getData={this.getData}\n          getGenres={this.handleGettingGenres}\n        />\n        <Routes>\n          <Route path=\"/\" exact element={\n            <LandingPage\n              getData={this.getData}\n            />} />\n          <Route path=\"/movie\" element={\n            <MoviePage\n              getData={this.getData}\n              getGenres={this.handleGettingGenres}\n              removeFromFavourites={this.removeFromFavourites}\n            />} />\n          <Route path=\"/visited\" element={\n            <VisitedPage\n              getData={this.getData}\n              getGenres={this.handleGettingGenres}\n              clearMoviesFromStorage={this.clearMoviesFromStorage}\n            />} />\n          <Route path=\"/favourites\" element={\n            <FavouritesPage\n              getData={this.getData}\n              getGenres={this.handleGettingGenres}\n              removeFromFavourites={this.removeFromFavourites}\n              clearMoviesFromStorage={this.clearMoviesFromStorage}\n            />} />\n        </Routes>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}